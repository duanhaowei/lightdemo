<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd 
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd 
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd 
       http://www.springframework.org/schema/mvc  
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<mvc:annotation-driven />
	<context:component-scan base-package="com.lightdemo" />

	<mvc:resources location="/views/image/" mapping="/views/image/**" />
	<mvc:resources location="/views/js/" mapping="/views/js/**" />

	<!--这个很重要，如果不配置这个那么DispatcherServlet中配置的就是应该有后缀的 否则连基本的jsp文件也会被拦截 -->
	<mvc:default-servlet-handler />

	<bean id="propertiesConfiguer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:common.properties </value>
				<value>classpath:jdbc.properties </value>
			</list>
		</property>
	</bean>
	<mvc:annotation-driven>
		<!-- 解决返回String时乱码 -->
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	
	<!-- 由于使用了这样的spring2.0+的注解@Controller 和 @RequestMapping 所以，处理器映射使用默认的DefaultAnnotationHandlerMapping 
		处理器适配器使用AnnotationMethodHandlerAdapter -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="useDefaultSuffixPattern" value="false" />
	</bean>

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
	</bean>

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/views/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 工作的bean -->
	<!-- job的配置开始 -->
	<!-- 方式一 适合简单的工作 see the example of method invoking job above 10 seconds 
		repeat every 50 seconds -->
<!-- 	<bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="deptAdminJob" />
		<property name="targetMethod" value="doIt" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="simpleTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="jobDetail" />
		<property name="startDelay" value="10000" />
		<property name="repeatInterval" value="50000" />
		
	</bean>  -->
	<!-- 方式二 ： 适合复杂的工作
	run every morning at 6 AM 
	<property name="cronExpression" value="0 0 6 * * ?"/> 
	--> 
	<bean name="orgAdminJob"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.lightdemo.rss.service.CommonJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="newsqqurl" value="${NEWSQQURL}" />
				<entry key="newsService" value-ref="newsService" />
			</map>
		</property>
	</bean>

	<bean id="cronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="orgAdminJob" />
		<property name="cronExpression" value="0 0/5 * * * ?"></property>
		<!-- <property name="cronExpression" value="0 0 6 * * ?" /> -->
	</bean>
	<!-- 启动触发器的配置开始 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
				<!-- <ref bean="simpleTrigger" /> -->
			</list>
		</property>
	</bean>
	<!-- 启动触发器的配置结束 -->

</beans>
